/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. query.jj */
/*@egen*/options {
               
  KEEP_LINE_COLUMN = false;
                 
}

PARSER_BEGIN(QueryParser)

package parser;

/** An Query Grammar. */
public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTQueryParserState jjtree = new JJTQueryParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    QueryParser t = new QueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(QueryParser)


SKIP :
{
  " "
| 
  "\t"
| 
  "\n"
| 
  "\r"
}

TOKEN [IGNORE_CASE]:
{
  	< SEEKING : "seeking" >
|
 	< OR : "or" >
|
	< A : "a">
|
	< POSITION : "position">
| 
  	< IN   : "in" >
|
  	< AROUND : "around">
|
  	< PREFERABLY : "preferably" >
|
	< WITH : "with" >
|
	< SALARY : "salary" >
|
	< OF : "of" >
| 
  	< TITLE : "Software engineer"
| 	"Applications Engineer"
| 	"Chief Technology Officer"
| 	"Chief Information Officer"
| 	"Computer and Information Systems Manager"
| 	"Database Administrator"
| 	"Help Desk Technician"
| 	"Information Technology Director"
| 	"Information Technology Manager"
| 	"Management Information Systems Director"
| 	"Network Architect"
| 	"Network Engineer"
| 	"Network System Administrator"
| 	"Programmer"
| 	"Programmer Analyst"
| 	"Security Specialist"
| 	"Senior Applications Engineer"
| 	"Senior Database Administrator"
| 	"Senior Network Architect"
| 	"Senior Network Engineer"
| 	"Senior Network System Administrator"
| 	"Senior Programmer"
| 	"Senior Programmer Analyst"
| 	"Senior Security Specialist"
| 	"Senior Software Engineer"
| 	"Senior Support Specialist"
| 	"Senior System Administrator"
| 	"Senior System Analyst"
| 	"Senior System Architect"
| 	"Senior System Designer"
| 	"Senior Systems Analyst"
| 	"Senior Systems Software Engineer"
| 	"Senior Web Administrator"
| 	"Senior Web Developer"
| 	"Software Engineer"
| 	"Software Quality Assurance Analyst"
| 	"Support Specialist"
| 	"System Administrator"
| 	"System Analyst"
| 	"System Architect"
| 	"System Designer"
| 	"Systems Analyst"
| 	"Systems Software Engineer"
| 	"Technical Specialist"
| 	"Telecommunications Specialist"
| 	"Web Administrator"
| 	"Web Developer"
| 	"Webmaster"
  	>
|
	< COMPANYTYPE : "Information Technology"
| 	"Network"
| 	"Bioinformatics"
| 	"Medical"
| 	"Business"
| 	"Accounting"
| 	"Transportation"
| 	"Banking"
| 	"Art"
| 	"Agriculture"		
	>
| 
	< AREANAME: "New York"
|  				"San Francisco"
| 				"Los Angeles"
| 				"Chicago"
|  				"San Jose"
| 				"Boston"
| 				"Mountain View"
| 				"Sunnyvale"
| 				"San Diego"
| 				"Palo Alto"
| 				"Menlo Park"
	>
|
	< UNIT: "month"
|
			"hour"
|
			"year"
	>
}

TOKEN :
{
  	< COMPANYNAME : ( ["a"-"z","A"-"Z","_","-","0"-"9"] )+ >
|
	< NUMBER : ( ["0"-"9"] )+ >
|
	< SALARYAMOUNT : "$"<NUMBER>"/"<UNIT>> 
}


/** Main production. */
ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Seek()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Query */
void Seek()      : {/*@bgen(jjtree) seek */
  ASTseek jjtn000 = new ASTseek(JJTSEEK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) seek */
        try {
/*@egen*/
	<SEEKING> Job()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Job() */
void Job()       : {}
{
	LOOKAHEAD(JobPrime() JobTemp())/*@bgen(jjtree) JobOr */
        {
          ASTJobOr jjtn001 = new ASTJobOr(JJTJOBOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	(JobPrime() (JobTemp())+)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/            
|
	JobPrime()
}

void JobTemp()       : {}
{
  LOOKAHEAD({ (getToken(1).kind == OR) })
  <OR> Job()
}


/** JobPrime() */
void JobPrime()      : {/*@bgen(jjtree) Job */
  ASTJob jjtn000 = new ASTJob(JJTJOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Job */
        try {
/*@egen*/
	LOOKAHEAD(Title() CAS())
  	Title() CAS()
|
	Title()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

/** CAS() */
void CAS()       : {}
{
	LOOKAHEAD(Area())
	AS()
| 
	LOOKAHEAD(Company() AS())
  	Company() AS()
|
	LOOKAHEAD(Company())
  	Company()
| 
	Salary()
} 

/** AS() */
void AS()       : {}
{
  	LOOKAHEAD(Area() Salary())
  	Area() Salary()
|
	Area()
| 
	Salary()
} 


/** Title() */
void Title()        : {/*@bgen(jjtree) title */
                       ASTtitle jjtn000 = new ASTtitle(JJTTITLE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) title */
        try {
/*@egen*/
  	<A> t = <TITLE>{ jjtn000.title = t.image; } <POSITION>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}

/** Company() */
void Company()          : {/*@bgen(jjtree) company */
  ASTcompany jjtn000 = new ASTcompany(JJTCOMPANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) company */
        try {
/*@egen*/
	LOOKAHEAD(3)/*@bgen(jjtree) preferableCompany */
        {
          ASTpreferableCompany jjtn001 = new ASTpreferableCompany(JJTPREFERABLECOMPANY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(<PREFERABLY>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                    <IN> CompanyType()
|
	LOOKAHEAD(3)/*@bgen(jjtree) preferableCompany */
        {
          ASTpreferableCompany jjtn002 = new ASTpreferableCompany(JJTPREFERABLECOMPANY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	(<PREFERABLY>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/                    <IN> CompanyName()
|
	LOOKAHEAD(2)
	<IN> CompanyType()
|
	LOOKAHEAD(2)
	<IN> CompanyName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** CompanyName() */
void CompanyName()       : {}
{
 	LOOKAHEAD(CompanyNamePrime() CompanyNameTemp())/*@bgen(jjtree) CompanyNameOr */
        {
          ASTCompanyNameOr jjtn001 = new ASTCompanyNameOr(JJTCOMPANYNAMEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	(CompanyNamePrime() (LOOKAHEAD(CompanyNameTemp()) CompanyNameTemp())+)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                     
|
	CompanyNamePrime()
}

/** CompanyNameTemp() */
void CompanyNameTemp()       : {}
{
 	<OR> CompanyName()
}


/** CompanyNamePrime() */
void CompanyNamePrime()              : {/*@bgen(jjtree) CompanyName */
                                        ASTCompanyName jjtn000 = new ASTCompanyName(JJTCOMPANYNAME);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CompanyName */
        try {
/*@egen*/
	t = <COMPANYNAME>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{ jjtn000.companyName = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

/** CompanyType() */
void CompanyType()       : {}
{
 	LOOKAHEAD(CompanyTypePrime() CompanyTypeTemp())/*@bgen(jjtree) CompanyTypeOr */
        {
          ASTCompanyTypeOr jjtn001 = new ASTCompanyTypeOr(JJTCOMPANYTYPEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	(CompanyTypePrime() (LOOKAHEAD(CompanyTypeTemp()) CompanyTypeTemp())+)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                     
|
	CompanyTypePrime()
}

/** CompanyTypeTemp() */
void CompanyTypeTemp()       : {}
{
 	<OR> CompanyType()
}


/** CompanyTypePrime() */
void CompanyTypePrime()              : {/*@bgen(jjtree) CompnayType */
                                        ASTCompnayType jjtn000 = new ASTCompnayType(JJTCOMPNAYTYPE);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CompnayType */
        try {
/*@egen*/
	t = <COMPANYTYPE>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.companyType = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}   


/** Area() */
void Area()       : {/*@bgen(jjtree) area */
  ASTarea jjtn000 = new ASTarea(JJTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) area */
        try {
/*@egen*/	LOOKAHEAD(2)/*@bgen(jjtree) preferableArea */
        {
          ASTpreferableArea jjtn001 = new ASTpreferableArea(JJTPREFERABLEAREA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	(<PREFERABLY>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                 inArea()
|
	LOOKAHEAD(2)/*@bgen(jjtree) preferableArea */
        {
          ASTpreferableArea jjtn002 = new ASTpreferableArea(JJTPREFERABLEAREA);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	(<PREFERABLY>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/                 aroundArea()
|
	inArea()
|
	aroundArea()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** inArea() */
void inArea()         : {/*@bgen(jjtree) inArea */
  ASTinArea jjtn000 = new ASTinArea(JJTINAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inArea */
        try {
/*@egen*/
	<IN> AreaName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** aroundArea() */
void aroundArea()             : {/*@bgen(jjtree) aroundArea */
  ASTaroundArea jjtn000 = new ASTaroundArea(JJTAROUNDAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aroundArea */
        try {
/*@egen*/
	<AROUND> AreaName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** AreaName() */
void AreaName()       : {}
{
  	LOOKAHEAD(AreaNamePrime() AreaNameTemp())/*@bgen(jjtree) AreaNameOr */
        {
          ASTAreaNameOr jjtn001 = new ASTAreaNameOr(JJTAREANAMEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	(AreaNamePrime() (LOOKAHEAD(AreaNameTemp()) AreaNameTemp())+)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                  
|
	AreaNamePrime()
}

/** AreaNameTemp() */
void AreaNameTemp()       : {}
{
 	<OR> AreaName()
}


/** AreaNamePrime() */
void AreaNamePrime()           : {/*@bgen(jjtree) AreaName */
                                  ASTAreaName jjtn000 = new ASTAreaName(JJTAREANAME);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AreaName */
        try {
/*@egen*/
	t = <AREANAME>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.areaName = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

/** Salary() */
void Salary()       : { Token t; }
{
	<WITH> <A> <SALARY> <OF>/*@bgen(jjtree) salary */
                                 {
                                   ASTsalary jjtn001 = new ASTsalary(JJTSALARY);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ (t = <SALARYAMOUNT>/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                     }
/*@egen*/ { jjtn001.salary = t.image; })/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                   }
                                 }
/*@egen*/        
} 