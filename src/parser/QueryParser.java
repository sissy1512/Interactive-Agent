/* Generated By:JJTree&JavaCC: Do not edit this line. QueryParser.java */
package parser;

/** An Query Grammar. */
public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants, QueryParserConstants {/*@bgen(jjtree)*/
  protected static JJTQueryParserState jjtree = new JJTQueryParserState();
  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    QueryParser t = new QueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

/** Main production. */
  static final public ASTStart Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Seek();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** Query */
  static final public void Seek() throws ParseException {
                    /*@bgen(jjtree) seek */
  ASTseek jjtn000 = new ASTseek(JJTSEEK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEEKING);
      Job();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Job() */
  static final public void Job() throws ParseException {
    if (jj_2_2(2147483647)) {
          ASTJobOr jjtn001 = new ASTJobOr(JJTJOBOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        JobPrime();
        label_1:
        while (true) {
          JobTemp();
          if (jj_2_1(1)) {
            ;
          } else {
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case A:
        JobPrime();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void JobTemp() throws ParseException {
    if ((getToken(1).kind == OR)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OR);
    Job();
  }

/** JobPrime() */
  static final public void JobPrime() throws ParseException {
                        /*@bgen(jjtree) Job */
  ASTJob jjtn000 = new ASTJob(JJTJOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(2147483647)) {
        Title();
        CAS();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case A:
          Title();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** CAS() */
  static final public void CAS() throws ParseException {
    if (jj_2_4(2147483647)) {
      AS();
    } else if (jj_2_5(2147483647)) {
      Company();
      AS();
    } else if (jj_2_6(2147483647)) {
      Company();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        Salary();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** AS() */
  static final public void AS() throws ParseException {
    if (jj_2_7(2147483647)) {
      Area();
      Salary();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case AROUND:
      case PREFERABLY:
        Area();
        break;
      case WITH:
        Salary();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** Title() */
  static final public void Title() throws ParseException {
                       /*@bgen(jjtree) title */
                       ASTtitle jjtn000 = new ASTtitle(JJTTITLE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(A);
      t = jj_consume_token(TITLE);
                         jjtn000.title = t.image;
      jj_consume_token(POSITION);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Company() */
  static final public void Company() throws ParseException {
                           /*@bgen(jjtree) company */
  ASTcompany jjtn000 = new ASTcompany(JJTCOMPANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(3)) {
          ASTpreferableCompany jjtn001 = new ASTpreferableCompany(JJTPREFERABLECOMPANY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PREFERABLY);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        jj_consume_token(IN);
        CompanyType();
      } else if (jj_2_9(3)) {
          ASTpreferableCompany jjtn002 = new ASTpreferableCompany(JJTPREFERABLECOMPANY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(PREFERABLY);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        jj_consume_token(IN);
        CompanyName();
      } else if (jj_2_10(2)) {
        jj_consume_token(IN);
        CompanyType();
      } else if (jj_2_11(2)) {
        jj_consume_token(IN);
        CompanyName();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** CompanyName() */
  static final public void CompanyName() throws ParseException {
    if (jj_2_13(2147483647)) {
          ASTCompanyNameOr jjtn001 = new ASTCompanyNameOr(JJTCOMPANYNAMEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        CompanyNamePrime();
        label_2:
        while (true) {
          CompanyNameTemp();
          if (jj_2_12(2147483647)) {
            ;
          } else {
            break label_2;
          }
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPANYNAME:
        CompanyNamePrime();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** CompanyNameTemp() */
  static final public void CompanyNameTemp() throws ParseException {
    jj_consume_token(OR);
    CompanyName();
  }

/** CompanyNamePrime() */
  static final public void CompanyNamePrime() throws ParseException {
                                        /*@bgen(jjtree) CompanyName */
                                        ASTCompanyName jjtn000 = new ASTCompanyName(JJTCOMPANYNAME);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMPANYNAME);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.companyName = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** CompanyType() */
  static final public void CompanyType() throws ParseException {
    if (jj_2_15(2147483647)) {
          ASTCompanyTypeOr jjtn001 = new ASTCompanyTypeOr(JJTCOMPANYTYPEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        CompanyTypePrime();
        label_3:
        while (true) {
          CompanyTypeTemp();
          if (jj_2_14(2147483647)) {
            ;
          } else {
            break label_3;
          }
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPANYTYPE:
        CompanyTypePrime();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** CompanyTypeTemp() */
  static final public void CompanyTypeTemp() throws ParseException {
    jj_consume_token(OR);
    CompanyType();
  }

/** CompanyTypePrime() */
  static final public void CompanyTypePrime() throws ParseException {
                                        /*@bgen(jjtree) CompnayType */
                                        ASTCompnayType jjtn000 = new ASTCompnayType(JJTCOMPNAYTYPE);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMPANYTYPE);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.companyType = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Area() */
  static final public void Area() throws ParseException {
                     /*@bgen(jjtree) area */
  ASTarea jjtn000 = new ASTarea(JJTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_16(2)) {
          ASTpreferableArea jjtn001 = new ASTpreferableArea(JJTPREFERABLEAREA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PREFERABLY);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        inArea();
      } else if (jj_2_17(2)) {
          ASTpreferableArea jjtn002 = new ASTpreferableArea(JJTPREFERABLEAREA);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(PREFERABLY);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        aroundArea();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          inArea();
          break;
        case AROUND:
          aroundArea();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** inArea() */
  static final public void inArea() throws ParseException {
                         /*@bgen(jjtree) inArea */
  ASTinArea jjtn000 = new ASTinArea(JJTINAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IN);
      AreaName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** aroundArea() */
  static final public void aroundArea() throws ParseException {
                                 /*@bgen(jjtree) aroundArea */
  ASTaroundArea jjtn000 = new ASTaroundArea(JJTAROUNDAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AROUND);
      AreaName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** AreaName() */
  static final public void AreaName() throws ParseException {
    if (jj_2_19(2147483647)) {
          ASTAreaNameOr jjtn001 = new ASTAreaNameOr(JJTAREANAMEOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        AreaNamePrime();
        label_4:
        while (true) {
          AreaNameTemp();
          if (jj_2_18(2147483647)) {
            ;
          } else {
            break label_4;
          }
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AREANAME:
        AreaNamePrime();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** AreaNameTemp() */
  static final public void AreaNameTemp() throws ParseException {
    jj_consume_token(OR);
    AreaName();
  }

/** AreaNamePrime() */
  static final public void AreaNamePrime() throws ParseException {
                                  /*@bgen(jjtree) AreaName */
                                  ASTAreaName jjtn000 = new ASTAreaName(JJTAREANAME);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(AREANAME);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.areaName = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Salary() */
  static final public void Salary() throws ParseException {
                        Token t;
    jj_consume_token(WITH);
    jj_consume_token(A);
    jj_consume_token(SALARY);
    jj_consume_token(OF);
                                   ASTsalary jjtn001 = new ASTsalary(JJTSALARY);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(SALARYAMOUNT);
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                       jjtn001.salary = t.image;
    } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3R_37() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == OR);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_23()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_46()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_6()) return true;
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(COMPANYNAME)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_16()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_16()) return true;
    Token xsp;
    if (jj_3R_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(A)) return true;
    if (jj_scan_token(SALARY)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(SALARYAMOUNT)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(AREANAME)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(PREFERABLY)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_22()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(PREFERABLY)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(A)) return true;
    if (jj_scan_token(TITLE)) return true;
    if (jj_scan_token(POSITION)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_22()) return true;
    Token xsp;
    if (jj_3R_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(AROUND)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_9()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(PREFERABLY)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(PREFERABLY)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(COMPANYTYPE)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_18()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public QueryParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x80,0x1000,0x1e00,0x80000,0x10000,0x600,0x20000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
